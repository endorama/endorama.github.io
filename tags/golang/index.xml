<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on Edoardo Tenani</title><link>https://endorama.dev/tags/golang/</link><description>Recent content in golang on Edoardo Tenani</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>Â© Edoardo Tenani 2022 - Some Rights Reserved</copyright><lastBuildDate>Thu, 20 Oct 2022 19:14:07 +0200</lastBuildDate><atom:link href="https://endorama.dev/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Recovery metadata from pdf</title><link>https://endorama.dev/2022/recovery-metadata-from-pdf/</link><pubDate>Thu, 20 Oct 2022 19:14:07 +0200</pubDate><guid>https://endorama.dev/2022/recovery-metadata-from-pdf/</guid><description>Recently a friend of mine asked my opinion on Muun, an open source Bitcoin and Lighting client.
I&amp;rsquo;m not particularly involved with cryptocurrencies due to their environmental impact but I think the technology and the evolution around its space are interesting to study. The idea of distributed consensus may not yet have a worldwide practical application but is nevertheless an interesting achievement.
What made it interesting is the self-custodial aspect. I got interested when I read about the Emergency Kit, which is probably still a burden for most users but it&amp;rsquo;s a great step forward in usability.</description></item><item><title>2ami</title><link>https://endorama.dev/2022/2ami/</link><pubDate>Sat, 17 Sep 2022 00:32:25 +0200</pubDate><guid>https://endorama.dev/2022/2ami/</guid><description>Some years ago I was learning Golang and researching a 2FA tool to use in the command line (that I wanted to integrate with ULauncher, a Linux alternative to Alfred). The only tool I found was saving all secrets in a plain text file and I really wanted to avoid that.
So 2ami was born! 2ami is a small CLI tool that allows to generate 2FA tokens. Is a single binary you can run and uses your OS secure storage to store secrets.</description></item><item><title>Golang divisions</title><link>https://endorama.dev/2022/golang-divisions/</link><pubDate>Thu, 15 Sep 2022 12:31:05 +0200</pubDate><guid>https://endorama.dev/2022/golang-divisions/</guid><description>At work today I read a piece of code in Golang that got me curious:
maxQuerySize := 500 // metricDataQueries is user provided sliceLength := len(metricDataQueries)/maxQuerySize + 1 // what&amp;#39;s the value of sliceLength? for i := 0; i &amp;lt; sliceLength; i++ { whatever } This is a simple integer division, but the result is then used as a parameter to the for loop. Integer division has a drawback, that can create a bug in this case: the remainder, as float in for loop declarations are supported only if no truncation happens when converting to int (i.</description></item></channel></rss>