<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>bash on Edoardo Tenani</title><link>https://endorama.dev/tags/bash/</link><description>Recent content in bash on Edoardo Tenani</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>Â© Edoardo Tenani 2022 - Some Rights Reserved</copyright><lastBuildDate>Mon, 28 Nov 2022 21:31:39 +0100</lastBuildDate><atom:link href="https://endorama.dev/tags/bash/index.xml" rel="self" type="application/rss+xml"/><item><title>Making your shell scripts bulletproof pt.2</title><link>https://endorama.dev/2022/making-your-shell-scripts-bulletproof-pt.2/</link><pubDate>Mon, 28 Nov 2022 21:31:39 +0100</pubDate><guid>https://endorama.dev/2022/making-your-shell-scripts-bulletproof-pt.2/</guid><description>I posted some suggestion to improve robustness of shell scripts in https://endorama.dev/2022/making-your-shell-scripts-bulletproof/, but there are a few more that I usually use that I think may be useful, so here is part 2 of it.
Don&amp;rsquo;t split words on space The Internal Field Separator that is used for word splitting after expansion and to split lines into words with the read builtin command. The default value is &amp;lt;space&amp;gt;&amp;lt;tab&amp;gt;&amp;lt;newline&amp;gt;.
From BASH manual, under SHELL BUILTIN COMMANDS &amp;gt; Shell Variables.</description></item><item><title>Making your shell scripts bulletproof</title><link>https://endorama.dev/2022/making-your-shell-scripts-bulletproof/</link><pubDate>Mon, 19 Sep 2022 21:13:23 +0200</pubDate><guid>https://endorama.dev/2022/making-your-shell-scripts-bulletproof/</guid><description>Writing shell scripts in BASH is something I started doing around 2008 probably, but it&amp;rsquo;s only after some years I started doing it in a way that was preventing me from shooting myself in the foot.
BASH is great and powerful, allows to harness the power of UNIX tools, but its syntax it&amp;rsquo;s unforgiving and not easy to master (and at times even after more than 10 years, confusing).
In this post I&amp;rsquo;ll go through some of my mandatory patterns to add robustness to my shell scripts.</description></item></channel></rss>