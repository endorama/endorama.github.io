<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Edoardo Tenani</title><link>https://endorama.dev/posts/</link><description>Recent content in Posts on Edoardo Tenani</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>Â© Edoardo Tenani 2022 - Some Rights Reserved</copyright><lastBuildDate>Thu, 10 Nov 2022 22:48:03 +0100</lastBuildDate><atom:link href="https://endorama.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang string comparison benchmark</title><link>https://endorama.dev/2022/golang-string-comparison-benchmark/</link><pubDate>Thu, 10 Nov 2022 22:48:03 +0100</pubDate><guid>https://endorama.dev/2022/golang-string-comparison-benchmark/</guid><description>I recently read No Safe Efficient Ways to Do Three-way String Comparisons in Go - Go 101 Blog about performing string comparisons and some performances issue that the strings.Compare function has.
The main statement of the post is
Benchmark code constantly shows strings.Compare uses 2x CPU time of bytes.Compare when comparing unequal same-length byte sequences (we view both strings and byte slices as byte sequences here).
It got me curious so I jumped to the editor to check what was happening.</description></item><item><title>Stop observing, start making</title><link>https://endorama.dev/2022/stop-observing-start-making/</link><pubDate>Thu, 03 Nov 2022 18:21:16 +0100</pubDate><guid>https://endorama.dev/2022/stop-observing-start-making/</guid><description>Observability has become the read-it-everywhere buzzword of software development. Like others before it.
Observing any piece of technology is incredibly easy.
Look at your screen, intensely.
Do it some more.
You are observing technology. If it&amp;rsquo;s on, you are observing software too.
So what now? You basically know nothing more about your system now that you did before observing it (except for, is it on ðŸ”¥?).
The reason why observing a piece of software is just a useless exercise is because observability is not an action.</description></item><item><title>Recovery metadata from pdf</title><link>https://endorama.dev/2022/recovery-metadata-from-pdf/</link><pubDate>Thu, 20 Oct 2022 19:14:07 +0200</pubDate><guid>https://endorama.dev/2022/recovery-metadata-from-pdf/</guid><description>Recently a friend of mine asked my opinion on Muun, an open source Bitcoin and Lighting client.
I&amp;rsquo;m not particularly involved with cryptocurrencies due to their environmental impact but I think the technology and the evolution around its space are interesting to study. The idea of distributed consensus may not yet have a worldwide practical application but is nevertheless an interesting achievement.
What made it interesting is the self-custodial aspect. I got interested when I read about the Emergency Kit, which is probably still a burden for most users but it&amp;rsquo;s a great step forward in usability.</description></item><item><title>Making your shell scripts bulletproof</title><link>https://endorama.dev/2022/making-your-shell-scripts-bulletproof/</link><pubDate>Mon, 19 Sep 2022 21:13:23 +0200</pubDate><guid>https://endorama.dev/2022/making-your-shell-scripts-bulletproof/</guid><description>Writing shell scripts in BASH is something I started doing around 2008 probably, but it&amp;rsquo;s only after some years I started doing it in a way that was preventing me from shooting myself in the foot.
BASH is great and powerful, allows to harness the power of UNIX tools, but its syntax it&amp;rsquo;s unforgiving and not easy to master (and at times even after more than 10 years, confusing).
In this post I&amp;rsquo;ll go through some of my mandatory patterns to add robustness to my shell scripts.</description></item><item><title>2ami</title><link>https://endorama.dev/2022/2ami/</link><pubDate>Sat, 17 Sep 2022 00:32:25 +0200</pubDate><guid>https://endorama.dev/2022/2ami/</guid><description>Some years ago I was learning Golang and researching a 2FA tool to use in the command line (that I wanted to integrate with ULauncher, a Linux alternative to Alfred). The only tool I found was saving all secrets in a plain text file and I really wanted to avoid that.
So 2ami was born! 2ami is a small CLI tool that allows to generate 2FA tokens. Is a single binary you can run and uses your OS secure storage to store secrets.</description></item><item><title>Golang divisions</title><link>https://endorama.dev/2022/golang-divisions/</link><pubDate>Thu, 15 Sep 2022 12:31:05 +0200</pubDate><guid>https://endorama.dev/2022/golang-divisions/</guid><description>At work today I read a piece of code in Golang that got me curious:
maxQuerySize := 500 // metricDataQueries is user provided sliceLength := len(metricDataQueries)/maxQuerySize + 1 // what&amp;#39;s the value of sliceLength? for i := 0; i &amp;lt; sliceLength; i++ { whatever } This is a simple integer division, but the result is then used as a parameter to the for loop. Integer division has a drawback, that can create a bug in this case: the remainder, as float in for loop declarations are supported only if no truncation happens when converting to int (i.</description></item><item><title>asdf, little awesome tool</title><link>https://endorama.dev/2022/asdf-little-awesome-tool/</link><pubDate>Wed, 17 Aug 2022 23:46:30 +0200</pubDate><guid>https://endorama.dev/2022/asdf-little-awesome-tool/</guid><description>Some years ago I discovered a little tool with a huge potential. I started using it and since then it proved useful in so many ways it&amp;rsquo;s now a mandatory tool in my toolset.
This tool is asdf. asdf is a CLI tool version manager. You may already be using multiple ones (rbenv, nvm, goenv to name a few) to manage versions of programming language tooling and accessories.
Having multiple tools for this purposes creates a series of disadvantages:</description></item><item><title>Hello World</title><link>https://endorama.dev/2022/hello-world/</link><pubDate>Mon, 08 Aug 2022 19:25:09 +0200</pubDate><guid>https://endorama.dev/2022/hello-world/</guid><description>All stories should start from somewhere! This is where the story for my website starts.</description></item></channel></rss>